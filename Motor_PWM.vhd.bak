library IEEE;

use IEEE.STD_LOGIC_1164.ALL;

use IEEE.STD_LOGIC_ARITH.ALL;

use IEEE.STD_LOGIC_UNSIGNED.ALL;

 

ENTITY Motor_PWM is

    generic( Max: natural := 500000);

    Port ( clk :  in  STD_LOGIC;--reloj de 50MHz
					pir_1 : in std_logic;
					pir_2 : in std_logic;
					bell : out std_logic;
					seguridad_activa : in std_logic;

             selector :  in  STD_LOGIC_VECTOR (1 downto 0);--selecciona las 4 posiciones

             PWM :  out  STD_LOGIC;--terminal donde sale la señal de PWM
				 led : out std_logic;
				 led2 : out std_logic);

end Motor_PWM;

 

ARCHITECTURE comportamiento of Motor_PWM is

   signal PWM_Count: integer range 1 to Max;--500000;
	signal alarma : std_logic :='1';

begin


   process( clk, selector,PWM_Count)

                     constant pos1: integer := 50000;  --representa a 1.00ms = 0°

                     constant pos2: integer := 62500;  --representa a 1.25ms = 45°

                     constant pos3: integer := 75000;  --representa a 1.50ms = 90°

                     constant pos4: integer := 100000; --representa a 2.00ms = 180°

          begin

             if rising_edge(clk)then PWM_Count <= PWM_Count + 1;

             end if;
				 if pir_1='1' then--con el selector en 00 se posiciona en servo en 0°

                                             if PWM_Count <= pos1 then PWM <= '1';

                                             else
															PWM <= '0';

                                             end if;
														end if;

                   if     selector(1)='0' then-- con el selector en 01 se posiciona en servo en 45°

                                             if PWM_Count <= pos2 then PWM <= '1';

                                             else                                        PWM <= '0';

                                             end if;
												end if;			

                    if  selector(0)='0' then-- con el selector en 11 se posiciona en servo en 90°

                                             if PWM_Count <= pos3 then PWM <= '1';

                                             else                                        PWM <= '0';

                                             end if;

												end if;
                     if pir_2='1' then-- con el selector en 10 se posiciona en servo en 180°

                                             if PWM_Count <= pos4 then PWM <= '1';

                                             else
															PWM <= '0';

                                             end if;
													end if;
          end process;
process(clk,pir_1,pir_2)
begin
			 if rising_edge(clk) and (pir_1='1' or pir_2='1') then
					alarma <= '0';
			end if;
end process;

led <= not pir_1;
led2 <= not pir_2;
bell <= alarma;
end comportamiento;